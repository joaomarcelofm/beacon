<div class="container">
  <div class="video-detail-box">
    <div class="row">
      <div class="meeting-wrapper">
        <div class="video-asset col-md-8">
          <div id="remoteParticipant"></div>
          <div id="videoPreview"></div>
        </div>
        <div class="user-info col-md-4">
          <h1>Your are yakking with <%= @meeting.request.receiver.first_name %></h1>
          <p><%= @meeting.request.receiver.bio %></p>
          <div class="details-icons">
            <div class="row">
              <span class="col-md-4"><i class="fa fa-map-marker"></i> <%= @meeting.request.receiver.location %></span>
              <span class="col-md-8"><i class="fa fa-cog"></i> <%= @meeting.request.receiver.occupation %></span>
            </div>
          </div>
          <div class="details-topics">
            <h2><span style="text-decoration: underline; text-decoration-color: #E22172">Topic</span>: <%= @meeting.request.topic %></h2>
            <h3>Here's an icebraker for your yak...</h3>
            <p><%= @meeting.random_topic %></p>
          </div>
        </div>
      </div>
    </div>
  </div>
  <div class="row">
  <%= link_to 'Leave Room', root_path, class: 'reject-button'%>
  </div>
</div>

<%= content_for(:after_js) do %>
<script src="//media.twiliocdn.com/sdk/js/video/v1/twilio-video.min.js"></script>
<script>
  Twilio.Video.connect('<%= @token %>', {name:'<%= @meeting.room_name %>'}).then(function(room) {
    console.log('Successfully joined a Room: ', room);
      // add local video to page
      logExistingParticipants(room.participants)
      displayLocalTrack(room.localParticipant)
      room.participants.forEach(displayRemoteParticipantVideo)
      room.on('participantConnected', function(participant) {
        console.log('A remote Participant connected: ', participant);
        displayRemoteParticipantVideo(participant)
      })
      room.on('participantDisconnected', function(participant) {
        console.log('A remote Participant disconnected: ', participant);
        removeRemoteParticipantVideo(participant)
      })
    }, function(error) {
      console.error('Unable to connect to Room: ' +  error.message);
    });

  function displayRemoteParticipantVideo(participant) {
    console.log("display remote participant video")
    const div = document.createElement('div')
    div.id = participant.sid

    participant.on('trackAdded', track => trackAdded(div, track))
    participant.tracks.forEach(track => {trackAdded(div, track)})
    const remotePart = document.getElementById("remoteParticipant")
    remotePart.appendChild(div);

  }

  function logExistingParticipants(participants) {
    participants.forEach(participant => {
      console.log('Participant "%s" is connected to the Room', participant.identity)
    })
  }

  function displayLocalTrack(participant) {
    participant.tracks.forEach(track => {
      console.log("local")
      document.getElementById('videoPreview').appendChild(track.attach());
    });
  }

  function removeRemoteParticipantVideo(participant) {
    participant.tracks.forEach(trackRemoved);
    document.getElementById(participant.sid).remove();
  }
  function trackAdded(div, track) {
    div.appendChild(track.attach());
  }

  function trackRemoved(track) {
    track.detach().forEach(element => element.remove())
  }

</script>
<% end %>





